prototype(DasPerfekteTeam.Podcaster:RawCollection) {
    @class = 'DasPerfekteTeam\\Podcaster\\Fusion\\RawCollectionImplementation'

    itemName = 'item'
}

prototype(DasPerfekteTeam.Podcaster:Feed.Episode) < prototype(Neos.Fusion:Template) {
    templatePath = 'resource://DasPerfekteTeam.Podcaster/Private/Partials/Episode.xml'

    episode = ${episode}
    title = ${q(episode).property('title')}
    subtitle = ${q(episode).property('titleOverride')}
    url = Neos.Neos:NodeUri {
        node = ${episode}
        format = 'html'
        absolute = true
    }
    description = ${q(episode).property('metaDescription')}
    date = ${Date.format(q(episode).property('publicationDate'), 'D, d M Y H:i:s O')}
    image = Neos.Neos:ImageUri {
        asset = ${q(episode).property('poster')}
        absolute = true
        @if.hasImage = ${q(documentNode).property('poster') != null}
    }

    audio = ${Array.first(Podcaster.filterByProperty(q(episode).property('audio'), 'resource.fileExtension', request.arguments.audiotype))}
    audioLength = ${q(episode).property('audioLength')}

    @if.hasAudio = ${this.audio ? true : false}
}

prototype(DasPerfekteTeam.Podcaster:Feed) < prototype(Neos.Fusion:Template) {
    @context.podcast = ${q(node).closest('[instanceof DasPerfekteTeam.Podcaster:Podcast]').get(0)}
    templatePath = 'resource://DasPerfekteTeam.Podcaster/Private/Templates/Page/Feed.xml'

    podcast = ${podcast}
    title = ${q(podcast).property('title')}
    url = Neos.Neos:NodeUri {
        node = ${podcast}
        format = 'html'
        absolute = true
    }

    selfLink = ${request.httpRequest.uri}

    description = ${q(podcast).property('metaDescription')}
    date = ${Date.format('now', 'D, d M Y H:i:s O')}
    image = Neos.Neos:ImageUri {
        asset = ${q(podcast).property('image')}
        absolute = true
    }
    author = ${q(podcast).property('author')}
    explicit = ${q(podcast).property('explicit') ? 'yes' : 'no'}
    category = ''
    email = ''

    keywords = ${q(podcast).property('metaKeywords')}
    summary = ${q(podcast).property('summary') ? q(podcast).property('summary') : q(podcast).property('metaDescription')}
    locale = 'de-DE'

    episodes = ${q(podcast).children('[instanceof DasPerfekteTeam.Podcaster:Episode]')}
    episodeRenderer = DasPerfekteTeam.Podcaster:Feed.Episode


    @cache {
        mode = 'cached'

        entryIdentifier {
            node = ${node}
            audiotype = ${request.arguments.audiotype}
        }

        entryTags {
            # Whenever the node changes the matched condition could change
            1 = ${'Node_' + documentNode.identifier}
            # Whenever an episode changes
            3 = 'NodeType_DasPerfekteTeam.Podcaster:Episode'
        }
    }
}

prototype(DasPerfekteTeam.Podcaster:Feed.Http) < prototype(Neos.Fusion:Http.Message) {
    httpResponseHead.headers.Content-Type = 'application/xml'
    content = DasPerfekteTeam.Podcaster:Feed
}

root {
    podcastFeed {
        condition = ${request.format == 'podcast.xml'}
        renderer = DasPerfekteTeam.Podcaster:Feed.Http
    }

    @cache.entryIdentifier {
        audiotype = ${request.arguments.audiotype}
    }
}

prototype(DasPerfekteTeam.Podcaster:PlayerEmbed) {
    @context.episodeNode = ${documentNode}
    documentNode = ${episodeNode}

    metadata = Neos.Fusion:RawArray {
        title = ${episodeNode.label}
        subtitle = ''
        publicationDate = ${Date.format(episodeNode.lastPublicationDateTime, 'Y-m-d\TH:i:sP')}
        poster = Neos.Neos:ImageUri {
            asset = ${q(episodeNode).property('poster')}
            @if.hasImage = ${q(episodeNode).property('poster') != null}
        }

        permalink = Neos.Neos:NodeUri {
            node = ${q(episodeNode).context({workspaceName: 'live'}).get(0)}
            absolute = true
        }
        alwaysShowHours = true
        startVolume = 0.8
        width = 'auto'
        summaryVisible = true
        timecontrolsVisible = true
        sharebuttonsVisible = false
        chaptersVisible = true

        chapters = DasPerfekteTeam.Podcaster:RawCollection {
            collection = ${q(episodeNode).children('chapters').children().get()}
            itemRenderer = Neos.Fusion:RawArray {
                start = ${q(item).property('start')}
                title = ${q(item).property('title')}
            }
        }

        show = Neos.Fusion:RawArray {
            title = 'Das Perfekte Team'
            subtitle = 'Agile Teams'
            summary = 'Thomas und Christian unterhalten sich mit Gästen über (agile) Teams und die Umgebung für diese.'
            url = Neos.Neos:NodeUri {
                node = ${q(site).context({workspaceName: 'live'}).get(0)}
                absolute = true
            }
        }

        activeTab = 'info'
    }
}

prototype(Neos.Neos:PrimaryContent) {
    podcastBackend {
        condition = ${q(node).is('[instanceof DasPerfekteTeam.Podcaster:Episode]') && node.context.inBackend}
        renderer = Neos.Fusion:Array {
            main = Neos.Neos:ContentCollection {
                nodePath = ${nodePath}
            }

            chapters = Neos.Neos:ContentCollection {
                attributes.class = 'collection'
                nodePath = 'chapters'
            }
        }
    }


}

prototype(DasPerfekteTeam.Podcaster:EpisodeList) >
prototype(DasPerfekteTeam.Podcaster:EpisodeList) < prototype(Neos.Fusion:Tag) {
    tagName = 'div'
    attributes.class = 'row'
    content = Neos.Fusion:Collection {
        collection = ${q(site).find('[instanceof DasPerfekteTeam.Podcaster:Episode]')}
        itemRenderer = Neos.Fusion:Template {
            templatePath = 'resource://DasPerfekteTeam.Podcaster/Private/Templates/FusionObjects/EpisodeCard.html'
            node = ${item}
            title = ${item.label}
            player = DasPerfekteTeam.Podcaster:PlayerEmbed {
                @context.episodeNode = ${item}

                metadata {
                    summaryVisible = false
                    timecontrolsVisible = false
                    sharebuttonsVisible = false
                    chaptersVisible = false
                }

            }
        }
    }

	# The following line must not be removed as it adds required meta data to all content elements in backend
	@process.contentElementWrapping {
		expression = Neos.Neos:ContentElementWrapping
		@position = 'end 999999999'
	}
}
